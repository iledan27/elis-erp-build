{"version":3,"sources":["test/state/TestActionType.ts","test/state/TestAction.ts","test/state/TestEffects.ts","app/state/RootEffects.ts","app/Test2.tsx","app/Test.tsx","app/App.tsx","test/state/TestReducer.ts","app/state/RootReducer.ts","app/state/Store.ts","index.tsx"],"names":["TestActionType","TestActions","type","GET_PRODUCTS","products","GET_PRODUCTS_SUCCESS","payload","error","GET_PRODUCTS_ERROR","fetchProducts","TestsEffects","call","fetch","headers","response","json","responseBody","put","takeEvery","rootEffects","all","Test2","getTest","props","getProducts","this","loading","console","log","listItems","map","elem","key","created_at","Component","connect","state","testState","dispatch","Test","history","push","onClick","withRouter","App","path","component","exact","initialTestState","RootReducer","combineReducers","action","sagaMiddleware","createSagaMiddleware","enhancers","composeWithDevTools","applyMiddleware","store","createStore","run","ReactDOM","render","fallback","document","getElementById"],"mappings":"0MAAYA,E,2CAAAA,K,mCAAAA,E,mDAAAA,E,gDAAAA,M,KCGL,IAAMC,EACE,WACX,MAAO,CACLC,KAAMF,EAAeG,eAHdF,EAMS,SAACG,GACnB,MAAO,CACLF,KAAMF,EAAeK,qBACrBC,QAASF,IATFH,EAYO,SAACM,GACjB,MAAO,CACLL,KAAMF,EAAeQ,mBACrBF,QAASC,I,WCbLE,G,WAeOC,GAfjB,SAAUD,IAAV,yEAEqB,OAFrB,kBAE2BE,YAAKC,MAAO,sCAAuC,CACxEC,QAAS,CACP,eAAgB,sBAJxB,OAOoC,OAL1BC,EAFV,gBAO0CA,EAASC,OAPnD,OASI,OAFMC,EAPV,gBASUC,YAAIhB,EAA+Be,IAT7C,+BAWI,OAXJ,oCAWUC,YAAIhB,EAAA,OAXd,sDAeO,SAAUS,IAAV,iEACL,OADK,SACCQ,YAAUlB,EAAeG,aAAcM,GADxC,uC,eCjBkBU,GAAV,SAAUA,IAAV,iEACb,OADa,SACPC,YAAI,CAACV,MADE,uC,qFCeTW,G,kNAoBJC,QAAU,WACR,EAAKC,MAAMC,e,uDApBI,IAAD,EACgBC,KAAKF,MAA3BG,EADM,EACNA,QAAStB,EADH,EACGA,SACjBuB,QAAQC,IAAI,UAAWF,GACvBC,QAAQC,IAAI,WAAYxB,GACxB,IAAMyB,EAAYzB,EAAS0B,KAAI,SAACC,EAAMC,GAAP,OAC7B,wBAAIA,IAAKA,GAAMD,EAAKE,eAGtB,OAAgB,IAAZP,EACK,kDAGL,6BACE,4BAAKG,Q,GAdKK,cAwCLC,eAfS,SAACC,GAMvB,MAL0C,CACxChC,SAAUgC,EAAMC,UAAUjC,SAE1BsB,QAASU,EAAMC,UAAUX,YAKF,SAACY,GAI1B,MAHqB,CACnBd,YAAa,kBAAMc,EAASrC,SAIjBkC,CAA6Cd,GCzCtDkB,E,4MAWJjB,QAAU,WACR,EAAKC,MAAMC,cACX,EAAKD,MAAMiB,QAAQC,KAAK,Y,uDAVT,IAAD,OACd,OACE,6BACE,4DACA,4BAAQC,QAAS,kBAAM,EAAKpB,YAA5B,qB,GAPWY,aAwBJS,cAAWR,YAAQ,MAPP,SAACG,GAI1B,MAHqB,CACnBd,YAAa,kBAAMc,EAASrC,SAKNkC,CAAkCI,ICvB7CK,E,oNATX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWzB,IAChC,kBAAC,IAAD,CAAO0B,OAAK,EAACF,KAAK,IAAIC,UAAWP,S,GANvBL,a,+BCHZc,EAA+B,CACnCtB,SAAS,EACTtB,SAAU,GACVG,MAAO,ICGM0C,EANKC,0BAAgB,CAClCb,UDKyB,WAAwD,IAAvDD,EAAsD,uDAAlCY,EAAkBG,EAAgB,uCAChF,OAAQA,EAAOjD,MACb,KAAKF,EAAeG,aAClB,OAAO,eAAKiC,EAAZ,CAAmBV,SAAS,IAC9B,KAAK1B,EAAeK,qBAClB,OAAO,eAAK+B,EAAZ,CAAmBV,SAAS,EAAOtB,SAAU+C,EAAO7C,UACtD,KAAKN,EAAeQ,mBAClB,OAAO,eAAK4B,EAAZ,CAAmBV,SAAS,EAAOnB,MAAO4C,EAAO7C,UAErD,OAAO8B,KEbIgB,EAAiBC,cACxBC,EAAYC,8BAAoBC,0BAAgBJ,IAWvCK,MAVDC,sBAAYT,EAAaK,G,gBCEvCF,EAAeO,IAAIxC,GAGjByC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUK,SAAU,mDAClB,kBAAC,EAAD,SAINC,SAASC,eAAe,W","file":"static/js/main.a32bf6f8.chunk.js","sourcesContent":["export enum TestActionType {\r\n  GET_PRODUCTS = \"[Test] Get Products\",\r\n  GET_PRODUCTS_SUCCESS = \"[Test] Get Products Success\",\r\n  GET_PRODUCTS_ERROR = \"[Test] Get Products Error\",\r\n}\r\n","import { TestActionType } from \"./TestActionType\";\r\nimport { Product } from \"test/models\";\r\n\r\nexport const TestActions = {\r\n  getProducts: () => {\r\n    return {\r\n      type: TestActionType.GET_PRODUCTS,\r\n    };\r\n  },\r\n  getProductsSuccess: (products: Product[]) => {\r\n    return {\r\n      type: TestActionType.GET_PRODUCTS_SUCCESS,\r\n      payload: products,\r\n    };\r\n  },\r\n  getProductsError: (error: Error) => {\r\n    return {\r\n      type: TestActionType.GET_PRODUCTS_ERROR,\r\n      payload: error,\r\n    };\r\n  },\r\n};\r\n","import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { TestActions } from \"./TestAction\";\r\nimport { TestActionType } from \"./TestActionType\";\r\nimport { Product } from \"test/models\";\r\n\r\nfunction* fetchProducts() {\r\n  try {\r\n    const response = yield call(fetch, \"https://api.iledan.com/api/products\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    const responseBody: Product[] = yield response.json();\r\n\r\n    yield put(TestActions.getProductsSuccess(responseBody));\r\n  } catch (err) {\r\n    yield put(TestActions.getProductsError(err));\r\n  }\r\n}\r\n\r\nexport function* TestsEffects() {\r\n  yield takeEvery(TestActionType.GET_PRODUCTS, fetchProducts);\r\n}\r\n","import { all } from \"@redux-saga/core/effects\";\r\nimport { TestsEffects } from \"test/state/TestEffects\";\r\n\r\nexport default function* rootEffects() {\r\n  yield all([TestsEffects()]);\r\n}\r\n","import React, { Component, Dispatch } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AnyAction } from \"redux\";\r\nimport { Product } from \"test/models\";\r\nimport { TestActions } from \"test/state/TestAction\";\r\nimport { IRootState } from \"./state/IRootState\";\r\n\r\nexport interface ITest2StateToProps {\r\n  products: Product[];\r\n  loading: boolean;\r\n}\r\n\r\nexport interface ITest2DispatchToProps {\r\n  getProducts: () => void;\r\n}\r\n\r\ninterface ITest2 extends ITest2StateToProps, ITest2DispatchToProps {}\r\n\r\nclass Test2 extends Component<ITest2, {}> {\r\n  public render() {\r\n    const { loading, products } = this.props;\r\n    console.log(\"loading\", loading);\r\n    console.log(\"products\", products);\r\n    const listItems = products.map((elem, key) => (\r\n      <li key={key}>{elem.created_at}</li>\r\n    ));\r\n\r\n    if (loading === true) {\r\n      return <div> You are a morron</div>;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <ul>{listItems}</ul>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  getTest = () => {\r\n    this.props.getProducts();\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: IRootState) => {\r\n  const propertyProps: ITest2StateToProps = {\r\n    products: state.testState.products,\r\n\r\n    loading: state.testState.loading,\r\n  };\r\n  return propertyProps;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n  const methodsProps = {\r\n    getProducts: () => dispatch(TestActions.getProducts()),\r\n  };\r\n  return methodsProps;\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Test2);\r\n","import React, { Component, Dispatch } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { AnyAction } from \"redux\";\r\nimport { TestActions } from \"test/state/TestAction\";\r\n\r\nexport interface ITestStateToProps {}\r\n\r\nexport interface ITestDispatchToProps {\r\n  getProducts: () => void;\r\n}\r\n\r\ninterface ITest\r\n  extends ITestStateToProps,\r\n    ITestDispatchToProps,\r\n    RouteComponentProps<any> {}\r\n\r\nclass Test extends Component<ITest, {}> {\r\n  //   public componentDidMount() {}\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <div>Hello everyone on app page!</div>\r\n        <button onClick={() => this.getTest()}>Get Products</button>\r\n      </div>\r\n    );\r\n  }\r\n  getTest = () => {\r\n    this.props.getProducts();\r\n    this.props.history.push(\"./test2\");\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n  const methodsProps = {\r\n    getProducts: () => dispatch(TestActions.getProducts()),\r\n  };\r\n  return methodsProps;\r\n};\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(Test));\r\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Test2 from \"./Test2\";\nimport Test from \"./Test\";\n\nclass App extends Component {\n  public componentDidMount() {}\n  public render() {\n    return (\n      <Switch>\n        <Route path=\"/Test2\" component={Test2} />\n        <Route exact path=\"/\" component={Test} />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","import { TestActionType } from \"./TestActionType\";\r\nimport { ITestState } from \"./ITestState\";\r\n\r\nconst initialTestState: ITestState = {\r\n  loading: false,\r\n  products: [],\r\n  error: \"\",\r\n};\r\n\r\nexport const TestReducer = (state: ITestState = initialTestState, action: any) => {\r\n  switch (action.type) {\r\n    case TestActionType.GET_PRODUCTS:\r\n      return { ...state, loading: true };\r\n    case TestActionType.GET_PRODUCTS_SUCCESS:\r\n      return { ...state, loading: false, products: action.payload };\r\n    case TestActionType.GET_PRODUCTS_ERROR:\r\n      return { ...state, loading: false, error: action.payload };\r\n  }\r\n  return state;\r\n};\r\n","import { combineReducers } from \"@reduxjs/toolkit\";\r\nimport { TestReducer } from \"../../test/state/TestReducer\";\r\n\r\nconst RootReducer = combineReducers({\r\n  testState: TestReducer,\r\n});\r\n\r\n// const type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport default RootReducer;\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport RootReducer from \"./RootReducer\";\r\n\r\nexport const sagaMiddleware = createSagaMiddleware();\r\nconst enhancers = composeWithDevTools(applyMiddleware(sagaMiddleware));\r\nconst store = createStore(RootReducer, enhancers);\r\n\r\nif (process.env.NODE_ENV === \"development\" && module.hot) {\r\n  module.hot.accept(\"./RootReducer\", () => {\r\n    const newRootReducer = require(\"./RootReducer\").default;\r\n    store.replaceReducer(newRootReducer);\r\n  });\r\n}\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport default store;\r\n","import rootEffects from \"app/state/RootEffects\";\nimport React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./app/App\";\nimport store, { sagaMiddleware } from \"./app/state/Store\";\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nsagaMiddleware.run(rootEffects);\n\nfunction render() {\n  ReactDOM.render(\n    <Provider store={store}>\n      <BrowserRouter>\n        <Suspense fallback={<h1>Loading profile...</h1>}>\n          <App />\n        </Suspense>\n      </BrowserRouter>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n}\n\nrender();\n\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  module.hot.accept(\"./app/App\", render);\n}\n"],"sourceRoot":""}